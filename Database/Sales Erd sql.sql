
--------------------------------------------------------------
-- Database creation Script

-- Auto-Generated by QSEE-SuperLite (c) 2001-2004 QSEE-Technologies Ltd.

-- Verbose generation: ON

-- note: spaces within table/column names have been replaced by underscores (_)

-- Target DB: SQL2

-- Entity Model :Entity Relationship Diagram

-- To drop the tables generated by this script run -
--   'C:\Users\Shambhu\Downloads\Sales Erd sql_drop.sql'

--------------------------------------------------------------



--------------------------------------------------------------
-- Table Creation --

-- Each entity on the model is represented by a table that needs to be created within the Database.
-- Within SQL new tables are created using the CREATE TABLE command.
-- When a table is created its name and its attributes are defined.
-- The values of which are derived from those specified on the model.
-- Certain constraints are sometimes also specified, such as identification of primary keys.

-- Create a Database table to represent the "Customer" entity.
CREATE TABLE Customer(
	Customer_ID	INTEGER NOT NULL,
	Customer_Name	VARCHAR(25),
	Segment	VARCHAR(15),
	-- Specify the PRIMARY KEY constraint for table "Customer".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_Customer PRIMARY KEY (Customer_ID)
);

-- Create a Database table to represent the "Orders" entity.
CREATE TABLE Orders(
	Order_ID	INTEGER NOT NULL,
	Order_Date	DATE,
	Ship_Date	DATE,
	Ship_Mode	VARCHAR(8),
	fk1_Customer_ID	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "Orders".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_Orders PRIMARY KEY (Order_ID)
);

-- Create a Database table to represent the "Product" entity.
CREATE TABLE Product(
	Product_ID	INTEGER NOT NULL,
	Product_Name	VARCHAR(30),
	Category	VARCHAR(20),
	Sub_Category	VARCHAR(8),
	-- Specify the PRIMARY KEY constraint for table "Product".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_Product PRIMARY KEY (Product_ID)
);

-- Create a Database table to represent the "Order_Details" entity.
CREATE TABLE Order_Details(
	Order_ID	INTEGER NOT NULL,
	Product_ID	INTEGER NOT NULL,
	Quantity	VARCHAR(8),
	Discount	VARCHAR(8),
	Profit	VARCHAR(8),
	Shipping_Cost	VARCHAR(8),
	fk1_Order_ID	INTEGER NOT NULL,
	fk2_Product_ID	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "Order_Details".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_Order_Details PRIMARY KEY (Order_ID,Product_ID)
);

-- Create a Database table to represent the "Location" entity.
CREATE TABLE Location(
	Location_ID	INTEGER NOT NULL,
	City	VARCHAR(8),
	State	VARCHAR(8),
	Country	VARCHAR(8),
	Region	VARCHAR(8),
	fk1_Order_ID	INTEGER NOT NULL,
	-- Specify FK as unique to maintain 1:1 relationship
	UNIQUE(fk1_Order_ID),
	fk2_Customer_ID	INTEGER NOT NULL,
	-- Specify the PRIMARY KEY constraint for table "Location".
	-- This indicates which attribute(s) uniquely identify each row of data.
	CONSTRAINT	pk_Location PRIMARY KEY (Location_ID)
);


--------------------------------------------------------------
-- Alter Tables to add fk constraints --

-- Now all the tables have been created the ALTER TABLE command is used to define some additional
-- constraints.  These typically constrain values of foreign keys to be associated in some way
-- with the primary keys of related tables.  Foreign key constraints can actually be specified
-- when each table is created, but doing so can lead to dependency problems within the script
-- i.e. tables may be referenced before they have been created.  This method is therefore safer.

-- Alter table to add new constraints required to implement the "places" relationship

-- This constraint ensures that the foreign key of table "Orders"
-- correctly references the primary key of table "Customer"

ALTER TABLE Orders ADD CONSTRAINT fk1_Orders_to_Customer FOREIGN KEY(fk1_Customer_ID) REFERENCES Customer(Customer_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "contains" relationship

-- This constraint ensures that the foreign key of table "Order_Details"
-- correctly references the primary key of table "Orders"

ALTER TABLE Order_Details ADD CONSTRAINT fk1_Order_Details_to_Orders FOREIGN KEY(fk1_Order_ID) REFERENCES Orders(Order_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "includes" relationship

-- This constraint ensures that the foreign key of table "Order_Details"
-- correctly references the primary key of table "Product"

ALTER TABLE Order_Details ADD CONSTRAINT fk2_Order_Details_to_Product FOREIGN KEY(fk2_Product_ID) REFERENCES Product(Product_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "shipped_to" relationship

-- This constraint ensures that the foreign key of table "Location"
-- correctly references the primary key of table "Orders"

ALTER TABLE Location ADD CONSTRAINT fk1_Location_to_Orders FOREIGN KEY(fk1_Order_ID) REFERENCES Orders(Order_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;

-- Alter table to add new constraints required to implement the "has" relationship

-- This constraint ensures that the foreign key of table "Location"
-- correctly references the primary key of table "Customer"

ALTER TABLE Location ADD CONSTRAINT fk2_Location_to_Customer FOREIGN KEY(fk2_Customer_ID) REFERENCES Customer(Customer_ID) ON DELETE RESTRICT ON UPDATE RESTRICT;


--------------------------------------------------------------
-- End of DDL file auto-generation
--------------------------------------------------------------
